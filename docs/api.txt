id: [a-z0-9]{5}
code: [0-9]{8}

POST /
	creates a new session that expires in 24 hours; returns 201 with id

GET /{id}
	returns all the possible options the user can choose from
	['option #1', 'option #2', 'option #3']

GET /{id}/ws
	starts a websocket for the user
	* enable (when voting is enabled)
	* disable (when voting is disabled)

GET /{id}/admin?code={code}
	returns the session data; if code is not matching returns 403
	{
		choices: ['option #1', 'option #2', 'option #3'],
		participants: ['Alice', 'Bob', 'Carol'],
		votes: [
			{participant: 'Alice', choice: 'option #2'},
			{participant: 'Carl', choice: 'option #3'}
		],
		starts: 2020-12-19T19:29:27+00:00,
		ends: 2020-12-19T19:29:57+00:00
	}

GET /{id}/admin/ws?code={code}
	starts websocket for the admin; if code is not matching returns 403
	* join (when someone joins)
		{
			participants: ['Alice', 'Bob', 'Carol', 'Dave']
		}
	* vote (when a vote is in)
		{
			participant: 'Bob',
			choice: 'option #3'
		}
	* done (when all votes are done)
		{
			votes: [
				{participant: 'Alice', choice: 'option #2'},
				{participant: 'Carl', choice: 'option #3'}
			],
		}

POST /{id}/join
	adds name to participants in the session, emits `join` in admin
	{
		name: 'Bob'
	}

PUT /{id}
	sends a vote into the session, if participant is included in session emits
	an `vote` on admin (ui should disable action now); if all participants
	voted emits `disable` in normal, `done` in admin and kills the countdown
	{
		name: "Bob",
		vote: "option #2"
	}

PUT /{id}/start?code={code}
	sets times, removes votes from session, emits empty `done` in admin,
	emits `enable` in normal, starts a countdown that will emit `done` on admin
	and `disable` on normal when it's over; returns 403 if code not matches
	{
		starts: 2020-12-19T19:39:27+00:00,
		ends: 2020-12-19T19:39:57+00:00
	}

PUT /{id}/reset?code={code}
	nulls out start and end times, removes votes from session, emits `done` in
	admin, emits `disable` in normal; returns 403 if code not matches

PUT /{id}/kick?code={code}
	remove participant from session, emit `participant` on admin; returns 403
	if code not matches
	{
		name: "Bob"
	}